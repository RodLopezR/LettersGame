{"version":3,"sources":["components/Displayer/Displayer.module.css","components/Box/Box.module.css","components/BoxContainer/BoxContainer.module.css","context/state.ts","context/context.tsx","context/actions.ts","components/Box/Box.component.tsx","components/BoxContainer/BoxContainer.component.tsx","components/Displayer/Displayer.component.tsx","app/App.tsx","services/BoardService.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","State","board","items","lastIndexRow","lastindexColumn","letters","dictionary","BoardContext","createContext","clickItem","a","b","clearAll","BoardContextProvider","children","useState","state","setState","Provider","value","indexRow","indexColumn","newState","selected","forEach","row","iRow","box","iColumn","isNeighbors","clickeable","letter","push","ClickInBlock","ClearAllFunction","BoxComponent","useContext","className","clsx","Styles","length","onClick","text","BoxContainer","container","map","fila","DisplayerComponent","join","isValid","includes","toLowerCase","button","textBox","error","validator","App","JsonData1","Error","boardData","i","boxItem","GetBoardData","JsonDictionary","words","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b23864e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Displayer_container__3zK9B\",\"textBox\":\"Displayer_textBox__1OMTS\",\"button\":\"Displayer_button__SvaN-\",\"text\":\"Displayer_text__3mt2i\",\"validator\":\"Displayer_validator__S2qKO\",\"error\":\"Displayer_error__g9t8V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Box_box__2nHJZ\",\"text\":\"Box_text__14c5g\",\"selected\":\"Box_selected__245AH\",\"clickeable\":\"Box_clickeable__1wzNA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BoxContainer_container__1tghS\"};","import BoardType from '../types/BoardType';\n\nexport interface StateType {\n  board: BoardType;\n  lastIndexRow: any;\n  lastindexColumn: any;\n  letters: string[];\n  dictionary: string[];\n}\n\nconst State: StateType = {\n  board: {\n    items: [],\n  },\n  lastIndexRow: null,\n  lastindexColumn: null,\n  letters: [],\n  dictionary: [],\n};\n\nexport default State;\n","import { createContext, FunctionComponent, useState } from 'react';\nimport { ClickInBlock, ClearAll as ClearAllFunction } from './actions';\n\nimport BoardType from '../types/BoardType';\nimport State, { StateType } from './state';\n\ninterface ContextProviderProps {\n  board: BoardType;\n  dictionary: string[];\n}\ninterface ContextActionProps {\n  clickItem: (indexRow: number, indexColumn: number) => void;\n  clearAll: () => void;\n}\n\nexport const BoardContext = createContext<[StateType, ContextActionProps]>([\n  State,\n  { clickItem: (a, b) => null, clearAll: () => null },\n]);\n\nexport const BoardContextProvider: FunctionComponent<ContextProviderProps> = ({\n  children,\n  board,\n  dictionary,\n}) => {\n  State.board = board;\n  State.dictionary = dictionary;\n  const [state, setState] = useState(State);\n\n  const clickItem = (indexRow: number, indexColumn: number) => {\n    //Validations\n    if (indexColumn < 0 || indexColumn > 4 || indexRow < 0 || indexRow > 4) {\n      return;\n    }\n    if (\n      state.lastIndexRow === indexRow &&\n      state.lastindexColumn === indexColumn\n    ) {\n      return;\n    }\n\n    setState(ClickInBlock(state, indexRow, indexColumn));\n  };\n\n  const clearAll = () => {\n    setState(ClearAllFunction(state));\n  };\n\n  return (\n    <BoardContext.Provider value={[state, { clickItem, clearAll }]}>\n      {children}\n    </BoardContext.Provider>\n  );\n};\n","import { StateType } from './state';\nimport BoxType from '../types/BoxType';\nimport RowBoxType from '../types/RowBoxType';\n\nconst ClickInBlock = (\n  state: StateType,\n  indexRow: number,\n  indexColumn: number\n): StateType => {\n  //Change state of box\n  const newState = { ...state };\n  newState.board.items[indexRow].items[indexColumn].selected = true;\n\n  //Enable nearby neighbors\n  newState.board.items.forEach((row: RowBoxType, iRow: number) => {\n    row.items.forEach((box: BoxType, iColumn: number) => {\n      const maxLimitY = indexRow + 1;\n      const minLimitY = indexRow - 1;\n      const maxLimitX = indexColumn + 1;\n      const minLimitX = indexColumn - 1;\n\n      const isNeighbors =\n        iRow <= maxLimitY &&\n        iRow >= minLimitY &&\n        iColumn <= maxLimitX &&\n        iColumn >= minLimitX;\n      box.clickeable = isNeighbors;\n    });\n  });\n\n  //Add letter into historial\n  const { letter } = newState.board.items[indexRow].items[indexColumn];\n  newState.letters.push(letter);\n\n  //Last value validation\n  newState.lastIndexRow = indexRow;\n  newState.lastindexColumn = indexColumn;\n  return newState;\n};\n\nconst ClearAll = (state: StateType): StateType => {\n  const newState = { ...state };\n  newState.board.items.forEach((row) => {\n    row.items.forEach((box) => {\n      box.selected = false;\n      box.clickeable = false;\n    });\n  });\n  newState.letters = [];\n  return { ...newState };\n};\n\nexport { ClickInBlock, ClearAll };\n","import clsx from 'clsx';\nimport { FunctionComponent, useContext } from 'react';\nimport { BoardContext } from '../../context/context';\nimport BoxType from '../../types/BoxType';\nimport Styles from './Box.module.css';\n\ninterface BoxProps {\n  box: BoxType;\n  indexRow: number;\n  indexColumn: number;\n}\n\nconst BoxComponent: FunctionComponent<BoxProps> = ({\n  box,\n  indexColumn,\n  indexRow,\n}) => {\n  const [{ letters }, { clickItem }] = useContext(BoardContext);\n\n  const handleClickBox = () => {\n    if (box.selected) return;\n\n    if (letters.length > 0) {\n      if (box.clickeable) {\n        clickItem(indexRow, indexColumn);\n      }\n    } else {\n      clickItem(indexRow, indexColumn);\n    }\n  };\n\n  return (\n    <div\n      className={clsx(\n        Styles.box,\n        'noSelectUI',\n        box.selected ? Styles.selected : '',\n        box.clickeable && !box.selected && letters.length > 0\n          ? Styles.clickeable\n          : ''\n      )}\n      onClick={handleClickBox}\n    >\n      <div className={Styles.text}>{box.letter}</div>\n    </div>\n  );\n};\n\nexport default BoxComponent;\n","import Box from '../../types/BoxType';\nimport BoxComponent from '../../components/Box';\nimport { useContext } from 'react';\nimport { BoardContext } from '../../context/context';\nimport Styles from './BoxContainer.module.css';\n\nfunction BoxContainer() {\n  const [{ board }] = useContext(BoardContext);\n  return (\n    <div className={Styles.container}>\n      {board.items.map((fila, indexRow) => (\n        <div key={indexRow}>\n          {fila.items.map((box: Box, indexColumn) => (\n            <BoxComponent\n              key={`${indexRow}-${indexColumn}`}\n              indexRow={indexRow}\n              indexColumn={indexColumn}\n              box={box}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default BoxContainer;\n","import clsx from 'clsx';\nimport { FunctionComponent, useContext } from 'react';\nimport { BoardContext } from '../../context/context';\nimport Styles from './Displayer.module.css';\n\nconst DisplayerComponent: FunctionComponent = () => {\n  const [{ letters, dictionary }, { clearAll }] = useContext(BoardContext);\n  const text = letters.join('');\n  const isValid = dictionary.includes(text.toLowerCase());\n  return (\n    <div className={Styles.container}>\n      <div>\n        <button className={Styles.button} onClick={clearAll}>\n          Clear all\n        </button>\n      </div>\n      <div className={Styles.textBox}>\n        <div className={clsx(Styles.text, !isValid ? Styles.error : '')}>\n          {text}\n        </div>\n        {text.length > 0 ? (\n          <div className={clsx(Styles.validator, !isValid ? Styles.error : '')}>\n            {isValid ? 'valid' : 'invalid'}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayerComponent;\n","import { BoardContextProvider } from '../context/context';\nimport { GetBoardData, GetDictionary } from '../services/BoardService';\n\nimport BoxContainer from '../components/BoxContainer/BoxContainer.component';\nimport DisplayerComponent from '../components/Displayer';\n\nfunction App() {\n  const board = GetBoardData();\n  const dictionary = GetDictionary();\n  return (\n    <BoardContextProvider board={board} dictionary={dictionary}>\n      <BoxContainer />\n      <DisplayerComponent />\n    </BoardContextProvider>\n  );\n}\n\nexport default App;\n","import BoardType from '../types/BoardType';\nimport JsonData1 from '../data/test-board-2.json';\nimport JsonDictionary from '../data/dictionary.json';\nimport RowBoxType from '../types/RowBoxType';\nimport BoxType from '../types/BoxType';\n\nconst GetBoardData = (): BoardType => {\n  if (JsonData1.board.length !== 16) {\n    throw new Error('Input data has no correct format');\n  }\n\n  const boardData: BoardType = {\n    items: [\n      { items: [] as BoxType[] } as RowBoxType,\n      { items: [] as BoxType[] } as RowBoxType,\n      { items: [] as BoxType[] } as RowBoxType,\n      { items: [] as BoxType[] } as RowBoxType,\n    ] as RowBoxType[],\n  };\n\n  let indexRow = 0;\n  let indexColumn = 0;\n  for (let i = 0; i < JsonData1.board.length; i++) {\n    const letter = JsonData1.board[i];\n    const boxItem: BoxType = {\n      letter,\n      selected: false,\n      clickeable: false,\n    };\n\n    boardData.items[indexRow].items.push(boxItem);\n\n    indexColumn++;\n    if (indexColumn === 4) {\n      indexRow++;\n      indexColumn = 0;\n    }\n  }\n  return boardData;\n};\n\nconst GetDictionary = (): string[] => {\n  return JsonDictionary.words;\n};\n\nexport { GetBoardData, GetDictionary };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}